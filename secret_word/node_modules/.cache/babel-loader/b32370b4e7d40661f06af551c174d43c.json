{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diego\\\\Documents\\\\Docker\\\\secret_word\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n//CSS\nimport './App.css'; //React\n\nimport { useCallback, useEffect, useState } from 'react'; //data\n\nimport { wordsList } from './data/words'; //components\n\nimport StartScreen from './components/StartScreen';\nimport Game from './components/Game';\nimport GameOver from './components/GameOver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stages = [{\n  id: 1,\n  name: \"start\"\n}, {\n  id: 2,\n  name: \"game\"\n}, {\n  id: 3,\n  name: \"end\"\n}];\nconst guessesQty = 3;\n\nfunction App() {\n  _s();\n\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(guessesQty);\n  const [letters, setLetters] = useState([]);\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [guesses, setGuesses] = useState(3);\n  const [score, setScore] = useState(50);\n\n  const pickWordAndCategory = () => {\n    //pick random category\n    const categories = Object.keys(words);\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)]; //pick random word\n\n    const word = words[category][Math.floor(Math.random() * words[category].length)];\n    return {\n      word,\n      category\n    };\n  }; //starts secretword\n\n\n  const startGame = () => {\n    // pick word and pick category\n    const {\n      word,\n      category\n    } = pickWordAndCategory(); //create an array of letters\n\n    let wordLetters = word.toLowerCase();\n    console.log(word, category);\n    console.log(wordLetters); //fill states\n\n    setPickedWord(word);\n    setPickedCategory(category);\n    setLetters(wordLetters.split(\"\"));\n    setGameStage(stages[1].name);\n  }; // process the letter input\n\n\n  const verifyLetter = letter => {\n    const normalizedLetter = letter.toLowerCase(); //const normalizedLetter = letter.toLowerCase();\n    //console.log(normalizedLetter);\n    //verifica se ja foi usada\n\n    if (guessedLetters.includes(normalizedLetter) || wrongLetters.includes(normalizedLetter)) {\n      return;\n    } //colocar letrad certa ou remove uma tentativa\n\n\n    if (letters.includes(normalizedLetter)) {\n      setGuessedLetters(actualGuessedLetters => [//pegar e adicionar a nova letra\n      ...actualGuessedLetters, normalizedLetter]);\n    } else {\n      setWrongLetters(actualWrongLetters => [//pegar e adicionar a nova letra\n      ...actualWrongLetters, normalizedLetter]); //subtrai tentativa\n\n      setGuesses(ActualGuesses => ActualGuesses - 1);\n    }\n  };\n\n  const clearLetterStates = () => {\n    setGuessedLetters([]);\n    setWrongLetters([]);\n  }; //vai executar a cada vez que esse dado for alterado\n\n\n  useEffect(() => {\n    //resetar todos os states\n    if (guesses <= 0) {\n      clearLetterStates();\n      setGameStage(stages[2].name);\n    }\n  }, [guesses]); //checar condição da vitória\n\n  useEffect(() => {\n    //um array de letras unicas\n    const uniqueLetters = [...new Set(letters)]; //condição de vitoria\n\n    if (guessedLetters.length === uniqueLetters.length) {\n      //add score\n      setScore(actualScore => actualScore += 100); //restart game with new word\n    }\n\n    console.log(uniqueLetters);\n  }, [guessedLetters]); // console.log(guessedLetters);\n  // console.log(wrongLetters);\n  // restarts the game\n\n  const retry = () => {\n    setScore(0);\n    setGuesses(guessesQty);\n    setGameStage(stages[0].name);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStage === 'start' && /*#__PURE__*/_jsxDEV(StartScreen, {\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 35\n    }, this), gameStage === 'game' && /*#__PURE__*/_jsxDEV(Game, {\n      verifyLetter: verifyLetter,\n      pickedWord: pickedWord,\n      pickedCategory: pickedCategory,\n      letters: letters,\n      guessedLetters: guessedLetters,\n      wrongLetters: wrongLetters,\n      guesses: guesses,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 35\n    }, this), gameStage === 'end' && /*#__PURE__*/_jsxDEV(GameOver, {\n      retry: retry,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"O43quea7KX79plsBjSPBnru6zWE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useEffect","useState","wordsList","StartScreen","Game","GameOver","stages","id","name","guessesQty","App","gameStage","setGameStage","words","pickedWord","setPickedWord","pickedCategory","setPickedCategory","letters","setLetters","guessedLetters","setGuessedLetters","wrongLetters","setWrongLetters","guesses","setGuesses","score","setScore","pickWordAndCategory","categories","Object","keys","category","Math","floor","random","length","word","startGame","wordLetters","toLowerCase","console","log","split","verifyLetter","letter","normalizedLetter","includes","actualGuessedLetters","actualWrongLetters","ActualGuesses","clearLetterStates","uniqueLetters","Set","actualScore","retry"],"sources":["C:/Users/diego/Documents/Docker/secret_word/src/App.js"],"sourcesContent":["//CSS\nimport './App.css';\n\n//React\nimport { useCallback, useEffect, useState } from 'react';\n\n//data\nimport { wordsList } from './data/words';\n\n\n//components\nimport StartScreen from './components/StartScreen';\nimport Game from './components/Game';\nimport GameOver from './components/GameOver';\n\nconst stages = [\n  {id: 1, name: \"start\"},\n  {id: 2, name: \"game\"},\n  {id: 3, name: \"end\"},\n]\n\nconst guessesQty = 3;\n\nfunction App() {\n\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(guessesQty);\n  const [letters, setLetters] = useState([]);\n\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [guesses, setGuesses] = useState(3);\n  const [score, setScore] = useState(50);\n\n  const pickWordAndCategory = () => {\n    //pick random category\n    const categories = Object.keys(words);\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)];    \n\n    //pick random word\n    const word = words[category][Math.floor(Math.random() * words[category].length)];   \n    \n\n    return {word, category};\n  } \n\n  //starts secretword\n  const startGame = () => {\n    // pick word and pick category\n    const {word, category} = pickWordAndCategory();\n\n    //create an array of letters\n    let wordLetters = word.toLowerCase();   \n    console.log(word, category);\n    console.log(wordLetters);\n\n    //fill states\n    setPickedWord(word);\n    setPickedCategory(category);\n    setLetters(wordLetters.split(\"\"));\n\n    setGameStage(stages[1].name);\n  }\n\n  // process the letter input\n  const verifyLetter = (letter) => {    \n    const normalizedLetter = letter.toLowerCase();\n\n    \n\t//const normalizedLetter = letter.toLowerCase();\n\n\t//console.log(normalizedLetter);\n\n\t//verifica se ja foi usada\n\tif (guessedLetters.includes(normalizedLetter) || wrongLetters.includes(normalizedLetter)) {          \n\t\treturn;\n\t}    \n\n\t//colocar letrad certa ou remove uma tentativa\n\tif (letters.includes(normalizedLetter)) {        \n\t\tsetGuessedLetters((actualGuessedLetters) => [\t\t\n\t\t//pegar e adicionar a nova letra\n\t\t...actualGuessedLetters,\n\t\tnormalizedLetter\t\t\n\t\t]);\n\t}else{\n\t\tsetWrongLetters((actualWrongLetters) => [\n\t\t//pegar e adicionar a nova letra\n\t\t...actualWrongLetters,\n\t\tnormalizedLetter\n\t\t]);\n\n\t\t//subtrai tentativa\n\t\tsetGuesses((ActualGuesses) => ActualGuesses - 1 )\n\t}\n  };\n\n  const clearLetterStates = () => {\n\tsetGuessedLetters([]);\n\tsetWrongLetters([]);\n\n  }\n  \n  //vai executar a cada vez que esse dado for alterado\n  useEffect(() => {\n\t//resetar todos os states\n\tif(guesses <= 0){\n\t\tclearLetterStates();\n\n\t\tsetGameStage(stages[2].name)\n\t}\n\n  }, [guesses]);\n\n  //checar condição da vitória\n  useEffect(() => {\n\t//um array de letras unicas\n\tconst uniqueLetters = [... new Set(letters)];\n\n\t//condição de vitoria\n\tif (guessedLetters.length === uniqueLetters.length) {\n\t\t//add score\n\t\tsetScore((actualScore) => actualScore += 100)\n\n\t\t//restart game with new word\n\n\t}\n\n\tconsole.log(uniqueLetters);\n\n  }, [guessedLetters]);\n\n  // console.log(guessedLetters);\n  // console.log(wrongLetters);\n\n  // restarts the game\n  const retry = (() => {\n\tsetScore(0);\n\tsetGuesses(guessesQty);\n\n    setGameStage(stages[0].name);\n  });\n\n\n  return (\n    <div className=\"App\">\n      { gameStage === 'start' &&  <StartScreen startGame={startGame} />}\n      { gameStage === 'game' &&  (<Game \n                                    verifyLetter={verifyLetter}\n                                    pickedWord={pickedWord}\n                                    pickedCategory={pickedCategory}\n                                    letters={letters}\n                                    guessedLetters={guessedLetters}\n                                    wrongLetters={wrongLetters}\n                                    guesses={guesses}\n                                    score={score}\n                                  />)}\n      { gameStage === 'end' &&  <GameOver retry={retry} score={score} />}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}