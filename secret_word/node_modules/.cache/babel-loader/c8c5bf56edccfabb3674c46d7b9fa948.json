{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diego\\\\Documents\\\\Docker\\\\secret_word\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n//CSS\nimport './App.css'; //React\n\nimport { useCallback, useEffect, useState } from 'react'; //data\n\nimport { wordsList } from './data/words'; //components\n\nimport StartScreen from './components/StartScreen';\nimport Game from './components/Game';\nimport GameOver from './components/GameOver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stages = [{\n  id: 1,\n  name: \"start\"\n}, {\n  id: 2,\n  name: \"game\"\n}, {\n  id: 3,\n  name: \"end\"\n}];\n\nfunction App() {\n  _s();\n\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n  const [guessedLetters, setGuessedLetters] = useState([]);\n\n  const pickWordAndCategory = () => {\n    //pick random category\n    const categories = Object.keys(words);\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)];\n    console.log(category); //pick random word\n\n    const word = words[category][Math.floor(Math.random() * words[category].length)];\n    console.log(word);\n    return {\n      word,\n      category\n    };\n  }; //starts secretword\n\n\n  const startGame = () => {\n    // pick word and pick category\n    const {\n      word,\n      category\n    } = pickWordAndCategory(); //create an array of letters\n\n    let wordLetters = word.toLowerCase().split(\"\");\n    console.log(word, category);\n    console.log(wordLetters); //fill states\n\n    setPickedWord(word);\n    setPickedCategory(category);\n    setLetters(letters);\n    setGameStage(stages[1].name);\n  }; // process the letter input\n\n\n  const verifyLetter = () => {\n    setGameStage(stages[2].name);\n  }; // restarts the game\n\n\n  const retry = () => {\n    setGameStage(stages[0].name);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStage === 'start' && /*#__PURE__*/_jsxDEV(StartScreen, {\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 35\n    }, this), gameStage === 'game' && /*#__PURE__*/_jsxDEV(Game, {\n      verifyLetter: verifyLetter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 34\n    }, this), gameStage === 'end' && /*#__PURE__*/_jsxDEV(GameOver, {\n      retry: retry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"wQ1gzmpi7nmKhDNrLP6IBsY6p9Q=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useEffect","useState","wordsList","StartScreen","Game","GameOver","stages","id","name","App","gameStage","setGameStage","words","pickedWord","setPickedWord","pickedCategory","setPickedCategory","letters","setLetters","guessedLetters","setGuessedLetters","pickWordAndCategory","categories","Object","keys","category","Math","floor","random","length","console","log","word","startGame","wordLetters","toLowerCase","split","verifyLetter","retry"],"sources":["C:/Users/diego/Documents/Docker/secret_word/src/App.js"],"sourcesContent":["//CSS\nimport './App.css';\n\n//React\nimport { useCallback, useEffect, useState } from 'react';\n\n//data\nimport { wordsList } from './data/words';\n\n\n//components\nimport StartScreen from './components/StartScreen';\nimport Game from './components/Game';\nimport GameOver from './components/GameOver';\n\nconst stages = [\n  {id: 1, name: \"start\"},\n  {id: 2, name: \"game\"},\n  {id: 3, name: \"end\"},\n]\n\nfunction App() {\n\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n\n  const [guessedLetters, setGuessedLetters] = useState([]);\n\n  const pickWordAndCategory = () => {\n    //pick random category\n    const categories = Object.keys(words);\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)];\n    \n    console.log(category);\n\n    //pick random word\n    const word = words[category][Math.floor(Math.random() * words[category].length)]\n\n    console.log(word);\n\n    return {word, category};\n  } \n\n  //starts secretword\n  const startGame = () => {\n    // pick word and pick category\n    const {word, category} = pickWordAndCategory();\n\n    //create an array of letters\n    let wordLetters = word.toLowerCase().split(\"\");\n\n    console.log(word, category);\n    console.log(wordLetters);\n\n    //fill states\n    setPickedWord(word);\n    setPickedCategory(category);\n    setLetters(letters);\n\n    setGameStage(stages[1].name);\n  }\n\n  // process the letter input\n  const verifyLetter = () => {\n    setGameStage(stages[2].name);\n  }\n\n  // restarts the game\n  const retry = () => {\n    setGameStage(stages[0].name);\n  }\n\n\n  return (\n    <div className=\"App\">\n      { gameStage === 'start' &&  <StartScreen startGame={startGame} />}\n      { gameStage === 'game' &&  <Game verifyLetter={verifyLetter} />}\n      { gameStage === 'end' &&  <GameOver retry={retry} />}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}